
#include "Decimate2.h"

#include "yaafe-core/Buffer.h"

#ifdef USE_SSE2_INTRINSICS
#include <Eigen/Core>
#include <emmintrin.h>
#endif

#define STATE_SIZE 1024
#define FILTER_SIZE 370 // 369 is original size, add one zero at beginning to get even size for SIMD
#define DELAY 92 // (369 - 1) / 4

using namespace std;

namespace YAAFE {

double* Decimate2::s_filter(NULL);

void Decimate2::initFilter()
{
#ifdef USE_SSE2_INTRINSICS
	s_filter = (double*) Eigen::ei_aligned_malloc(FILTER_SIZE*sizeof(double));
#else
	s_filter = new double[FILTER_SIZE];
#endif
	const double tmp[FILTER_SIZE] = {
			   -14.1929277112222e-006,
			   -109.375101447866e-006,
			   -373.352805510712e-006,
			   -765.969912366417e-006,
			   -1.00149791988030e-003,
			   -747.231332323274e-006,
			   -65.2514798497809e-006,
			    476.397292964532e-006,
			    377.137871389001e-006,
			   -145.884786028187e-006,
			   -380.475502970684e-006,
			   -56.3374149906448e-006,
			    299.131624524073e-006,
			    160.833548120584e-006,
			   -209.110868249136e-006,
			   -208.673208216821e-006,
			    131.476632330566e-006,
			    226.752748670339e-006,
			   -68.9777049486052e-006,
			   -230.542406879544e-006,
			    18.4992968676267e-006,
			    227.872001644219e-006,
			    23.9503023941304e-006,
			   -222.267856019932e-006,
			   -61.9801378254435e-006,
			    214.276497100263e-006,
			    97.2934917272737e-006,
			   -204.108759540783e-006,
			   -131.045107505443e-006,
			    191.609988992826e-006,
			    163.917951605264e-006,
			   -176.613182324326e-006,
			   -196.691016837584e-006,
			    158.300604433840e-006,
			    229.578322451248e-006,
			   -135.565239054767e-006,
			   -261.924425142740e-006,
			    107.812720232037e-006,
			    292.858514791118e-006,
			   -74.9101508731899e-006,
			   -321.689763474712e-006,
			    36.8538655116522e-006,
			    348.016158651195e-006,
			    6.79987113595347e-006,
			   -371.021581071202e-006,
			   -56.6361679061387e-006,
			    388.927844552161e-006,
			    112.068204087261e-006,
			   -400.355389593083e-006,
			   -171.858574315133e-006,
			    404.983686325122e-006,
			    235.466912295447e-006,
			   -402.482918603628e-006,
			   -303.027166949920e-006,
			    391.428564324093e-006,
			    373.852316511353e-006,
			   -370.155850779657e-006,
			   -445.937094318350e-006,
			    338.482107991469e-006,
			    518.013500991775e-006,
			   -296.399305466516e-006,
			   -589.681238166261e-006,
			    242.471629149013e-006,
			    658.950031844427e-006,
			   -176.059208470981e-006,
			   -723.086764088706e-006,
			    98.4259494897619e-006,
			    781.285722383198e-006,
			   -9.72452383906986e-006,
			   -832.746723460377e-006,
			   -91.1641248346206e-006,
			    874.344821543074e-006,
			    203.075378933421e-006,
			   -903.753147880488e-006,
			   -323.607177769175e-006,
			    921.339208583786e-006,
			    453.695183675874e-006,
			   -924.161578626545e-006,
			   -592.011645748025e-006,
			    909.310580294981e-006,
			    734.787620928215e-006,
			   -877.789176068087e-006,
			   -882.513044890050e-006,
			    826.527909148063e-006,
			    1.03243329813689e-003,
			   -753.660437220911e-006,
			   -1.18011688810526e-003,
			    661.548072246352e-006,
			    1.32719951267375e-003,
			   -544.819191047016e-006,
			   -1.46613393979470e-003,
			    407.674520181169e-006,
			    1.59817348575876e-003,
			   -246.422147074069e-006,
			   -1.71721916863106e-003,
			    63.8602826228248e-006,
			    1.82214378987448e-003,
			    140.860573547471e-006,
			   -1.90874983668557e-003,
			   -366.074938837888e-006,
			    1.97427110243605e-003,
			    610.718024888339e-006,
			   -2.01522371231382e-003,
			   -872.695380707765e-006,
			    2.02879834853091e-003,
			    1.15015947127341e-003,
			   -2.01159447899229e-003,
			   -1.44019360987330e-003,
			    1.96087939943559e-003,
			    1.73983995387536e-003,
			   -1.87376255663464e-003,
			   -2.04520843919965e-003,
			    1.74839981670143e-003,
			    2.35303466700614e-003,
			   -1.58218355008970e-003,
			   -2.65878801792372e-003,
			    1.37343846217885e-003,
			    2.95785783063913e-003,
			   -1.12085709199274e-003,
			   -3.24543152546737e-003,
			    823.460050545575e-006,
			    3.51647306662040e-003,
			   -480.522117447441e-006,
			   -3.76555328202694e-003,
			    91.6812372163401e-006,
			    3.98663540110465e-003,
			    342.396313590592e-006,
			   -4.17402192668727e-003,
			   -820.914077269091e-006,
			    4.32178579306235e-003,
			    1.34289689234687e-003,
			   -4.42320144054047e-003,
			   -1.90610102697363e-003,
			    4.47203279153694e-003,
			    2.50809640880041e-003,
			   -4.46194442334779e-003,
			   -3.14625871360961e-003,
			    4.38604622916074e-003,
			    3.81712539785445e-003,
			   -4.23746078292243e-003,
			   -4.51673071695423e-003,
			    4.00930963768113e-003,
			    5.24092385340558e-003,
			   -3.69428483294713e-003,
			   -5.98521205442523e-003,
			    3.28443635276123e-003,
			    6.74443714366927e-003,
			   -2.77150782974930e-003,
			   -7.51331267629706e-003,
			    2.14639195388204e-003,
			    8.28655723103206e-003,
			   -1.39825380665393e-003,
			   -9.05812421314401e-003,
			    514.925027972857e-006,
			    9.82203453071182e-003,
			    518.248165483007e-006,
			   -10.5726367246702e-003,
			   -1.72030480859361e-003,
			    11.3035271608578e-003,
			    3.11505900111332e-003,
			   -12.0089428374173e-003,
			   -4.73486887180721e-003,
			    12.6830729333015e-003,
			    6.62449768588218e-003,
			   -13.3199639950164e-003,
			   -8.84730200888213e-003,
			    13.9146545151219e-003,
			    11.4982795588132e-003,
			   -14.4616406499411e-003,
			   -14.7234729762787e-003,
			    14.9560543853253e-003,
			    18.7606009917525e-003,
			   -15.3942407242194e-003,
			   -24.0246456942159e-003,
			    15.7713322818048e-003,
			    31.3007438302563e-003,
			   -16.0848751833455e-003,
			   -42.2799556994421e-003,
			    16.3313743840532e-003,
			    61.3651108075119e-003,
			   -16.5093349449255e-003,
			   -104.718830580624e-003,
			    16.6165267161317e-003,
			    317.847295548521e-003,
			    483.347578307544e-003,
			    317.847295548521e-003,
			    16.6165267161317e-003,
			   -104.718830580624e-003,
			   -16.5093349449255e-003,
			    61.3651108075119e-003,
			    16.3313743840532e-003,
			   -42.2799556994421e-003,
			   -16.0848751833455e-003,
			    31.3007438302563e-003,
			    15.7713322818048e-003,
			   -24.0246456942159e-003,
			   -15.3942407242194e-003,
			    18.7606009917525e-003,
			    14.9560543853253e-003,
			   -14.7234729762787e-003,
			   -14.4616406499411e-003,
			    11.4982795588132e-003,
			    13.9146545151219e-003,
			   -8.84730200888213e-003,
			   -13.3199639950164e-003,
			    6.62449768588218e-003,
			    12.6830729333015e-003,
			   -4.73486887180721e-003,
			   -12.0089428374173e-003,
			    3.11505900111332e-003,
			    11.3035271608578e-003,
			   -1.72030480859361e-003,
			   -10.5726367246702e-003,
			    518.248165483007e-006,
			    9.82203453071182e-003,
			    514.925027972857e-006,
			   -9.05812421314401e-003,
			   -1.39825380665393e-003,
			    8.28655723103206e-003,
			    2.14639195388204e-003,
			   -7.51331267629706e-003,
			   -2.77150782974930e-003,
			    6.74443714366927e-003,
			    3.28443635276123e-003,
			   -5.98521205442523e-003,
			   -3.69428483294713e-003,
			    5.24092385340558e-003,
			    4.00930963768113e-003,
			   -4.51673071695423e-003,
			   -4.23746078292243e-003,
			    3.81712539785445e-003,
			    4.38604622916074e-003,
			   -3.14625871360961e-003,
			   -4.46194442334779e-003,
			    2.50809640880041e-003,
			    4.47203279153694e-003,
			   -1.90610102697363e-003,
			   -4.42320144054047e-003,
			    1.34289689234687e-003,
			    4.32178579306235e-003,
			   -820.914077269091e-006,
			   -4.17402192668727e-003,
			    342.396313590592e-006,
			    3.98663540110465e-003,
			    91.6812372163401e-006,
			   -3.76555328202694e-003,
			   -480.522117447441e-006,
			    3.51647306662040e-003,
			    823.460050545575e-006,
			   -3.24543152546737e-003,
			   -1.12085709199274e-003,
			    2.95785783063913e-003,
			    1.37343846217885e-003,
			   -2.65878801792372e-003,
			   -1.58218355008970e-003,
			    2.35303466700614e-003,
			    1.74839981670143e-003,
			   -2.04520843919965e-003,
			   -1.87376255663464e-003,
			    1.73983995387536e-003,
			    1.96087939943559e-003,
			   -1.44019360987330e-003,
			   -2.01159447899229e-003,
			    1.15015947127341e-003,
			    2.02879834853091e-003,
			   -872.695380707765e-006,
			   -2.01522371231382e-003,
			    610.718024888339e-006,
			    1.97427110243605e-003,
			   -366.074938837888e-006,
			   -1.90874983668557e-003,
			    140.860573547471e-006,
			    1.82214378987448e-003,
			    63.8602826228248e-006,
			   -1.71721916863106e-003,
			   -246.422147074069e-006,
			    1.59817348575876e-003,
			    407.674520181169e-006,
			   -1.46613393979470e-003,
			   -544.819191047016e-006,
			    1.32719951267375e-003,
			    661.548072246352e-006,
			   -1.18011688810526e-003,
			   -753.660437220911e-006,
			    1.03243329813689e-003,
			    826.527909148063e-006,
			   -882.513044890050e-006,
			   -877.789176068087e-006,
			    734.787620928215e-006,
			    909.310580294981e-006,
			   -592.011645748025e-006,
			   -924.161578626545e-006,
			    453.695183675874e-006,
			    921.339208583786e-006,
			   -323.607177769175e-006,
			   -903.753147880488e-006,
			    203.075378933421e-006,
			    874.344821543074e-006,
			   -91.1641248346206e-006,
			   -832.746723460377e-006,
			   -9.72452383906986e-006,
			    781.285722383198e-006,
			    98.4259494897619e-006,
			   -723.086764088706e-006,
			   -176.059208470981e-006,
			    658.950031844427e-006,
			    242.471629149013e-006,
			   -589.681238166261e-006,
			   -296.399305466516e-006,
			    518.013500991775e-006,
			    338.482107991469e-006,
			   -445.937094318350e-006,
			   -370.155850779657e-006,
			    373.852316511353e-006,
			    391.428564324093e-006,
			   -303.027166949920e-006,
			   -402.482918603628e-006,
			    235.466912295447e-006,
			    404.983686325122e-006,
			   -171.858574315133e-006,
			   -400.355389593083e-006,
			    112.068204087261e-006,
			    388.927844552161e-006,
			   -56.6361679061387e-006,
			   -371.021581071202e-006,
			    6.79987113595347e-006,
			    348.016158651195e-006,
			    36.8538655116522e-006,
			   -321.689763474712e-006,
			   -74.9101508731899e-006,
			    292.858514791118e-006,
			    107.812720232037e-006,
			   -261.924425142740e-006,
			   -135.565239054767e-006,
			    229.578322451248e-006,
			    158.300604433840e-006,
			   -196.691016837584e-006,
			   -176.613182324326e-006,
			    163.917951605264e-006,
			    191.609988992826e-006,
			   -131.045107505443e-006,
			   -204.108759540783e-006,
			    97.2934917272737e-006,
			    214.276497100263e-006,
			   -61.9801378254435e-006,
			   -222.267856019932e-006,
			    23.9503023941304e-006,
			    227.872001644219e-006,
			    18.4992968676267e-006,
			   -230.542406879544e-006,
			   -68.9777049486052e-006,
			    226.752748670339e-006,
			    131.476632330566e-006,
			   -208.673208216821e-006,
			   -209.110868249136e-006,
			    160.833548120584e-006,
			    299.131624524073e-006,
			   -56.3374149906448e-006,
			   -380.475502970684e-006,
			   -145.884786028187e-006,
			    377.137871389001e-006,
			    476.397292964532e-006,
			   -65.2514798497809e-006,
			   -747.231332323274e-006,
			   -1.00149791988030e-003,
			   -765.969912366417e-006,
			   -373.352805510712e-006,
			   -109.375101447866e-006,
			   -14.1929277112222e-006,
				0.0};
	for (int i=0;i<FILTER_SIZE;i++)
		s_filter[i] = tmp[FILTER_SIZE-1-i]; // ensure s_filter is 16-bytes aligned
}

Decimate2::Decimate2() : m_state(NULL)
{}

Decimate2::~Decimate2() {
	if (m_state) {
#ifdef USE_SSE2_INTRINSICS
		Eigen::ei_aligned_free(m_state);
#else
		delete [] m_state;
#endif
	}
}


bool Decimate2::init(const ParameterMap& params, const Ports<StreamInfo>& inp)
{
	assert(inp.size()==1); // can only decimate mono signals
	const StreamInfo& in = inp[0].data;

#ifdef USE_SSE2_INTRINSICS
	m_state = (double*) Eigen::ei_aligned_malloc(STATE_SIZE*sizeof(double));
#else
	m_state = new double[STATE_SIZE];
#endif
	m_pos = 0;
	if (s_filter==NULL)
		initFilter();

	StreamInfo out;
	out.sampleRate = in.sampleRate / 2;
	out.sampleStep = in.sampleStep;
	out.frameLength = in.frameLength;
	out.size = 1;
	outStreamInfo().add(out);

	return true;
}

void Decimate2::reset() {
	m_pos = FILTER_SIZE - 2 * DELAY-1;
	for (int i=0;i<m_pos;i++)
		m_state[i] = 0.0;
}

bool Decimate2::process(Ports<InputBuffer*>& inp, Ports<OutputBuffer*>& outp)
{
	assert(inp.size()==1);
	assert(outp.size()==1);
	InputBuffer* in = inp[0].data;
	OutputBuffer* out = outp[0].data;

	while (!in->empty()) {
		// read data
		int read = in->read(m_state+m_pos,STATE_SIZE-m_pos);
		in->consumeTokens(read);
		m_pos += read;

//		 filtering
		int i=0;

#ifdef USE_SSE2_INTRINSICS
		{
			// start filtering using SSE2 instructions
			int i_end=m_pos-FILTER_SIZE-2;
			double tmp[2];
			for (;i<(i_end);i+=4) {
				__m128d f = _mm_load_pd(s_filter);
				__m128d s = _mm_load_pd(m_state + i);
				__m128d v1 = _mm_mul_pd(f,s);
				__m128d v2 = _mm_setzero_pd();
				for (int j=2;j<FILTER_SIZE;j+=2)
				{
					s = _mm_load_pd(m_state + i + j);
					v2 = _mm_add_pd(v2,_mm_mul_pd(f,s));
					f = _mm_load_pd(s_filter + j);
					v1 = _mm_add_pd(v1,_mm_mul_pd(f,s));
				}
				s = _mm_load_pd(m_state + i + FILTER_SIZE);
				v2 = _mm_add_pd(v2,_mm_mul_pd(f,s));
				_mm_storeu_pd(tmp,v1);
				*out->writeToken() = tmp[0] + tmp[1];
				_mm_storeu_pd(tmp,v2);
				*out->writeToken() = tmp[0] + tmp[1];
			}
		}
#endif

		int i_end=m_pos-FILTER_SIZE;
		for (;i<i_end;i+=2) {
			long double v = 0.0;
			for (int j=0;j<FILTER_SIZE;++j)
				v += m_state[i+j]*s_filter[j];
			*out->writeToken() = v;
		}

		// save last samples for next filterings
		int k = 0;
		for (;i<m_pos;++k,++i)
			m_state[k] = m_state[i];
		m_pos = k;
	}

	return true;
}

void Decimate2::flush(Ports<InputBuffer*>& inp, Ports<OutputBuffer*>& outp)
{
	assert(inp.size()==1);
	InputBuffer* in = inp[0].data;
	in->appendZeros(2*DELAY + 1 + (in->tokenno() + in->availableTokens() - 1)%2);
	process(inp,outp);
}

} // YAAFE
